rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.createdBy;
    }
    
    function isAuthor(resource) {
      return request.auth.uid == resource.data.authorId;
    }
    
    function isInGroup(groupId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/groups/$(groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }

    // Forms collection rules
    match /forms/{formId} {
      allow read: if 
        // Anyone can read public forms
        resource.data.type == 'public' ||
        // Creator can read their own forms (supporting both createdBy and authorId)
        (isSignedIn() && (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.authorId)) ||
        // Group members can read private forms
        (resource.data.type == 'private' && isInGroup(resource.data.group));
      
      allow create: if isSignedIn();
      
      allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.authorId);
    }
    
    // Form responses rules
    match /form_responses/{responseId} {
      allow read: if 
        // Form creator can read all responses (supporting both field names)
        (isSignedIn() && 
         exists(/databases/$(database)/documents/forms/$(resource.data.formId)) &&
         (request.auth.uid == get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.createdBy ||
          request.auth.uid == get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.authorId)) ||
        // Users can read their own responses
        (isSignedIn() && request.auth.uid == resource.data.userId);
      
      allow create: if isSignedIn();
      
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Groups collection rules
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.ownerId);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Announcements collection rules
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.authorId);
    }

    // Resources collection rules
    match /resources/{resourceId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.authorId || request.auth.uid == resource.data.uploadedBy);
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || request.auth.uid == resource.data.authorId);
    }
  }
}
